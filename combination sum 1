Method 1
____________________________________________________
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans =new ArrayList<>();
        fun(candidates,target,ans,new ArrayList<>(),0);
        return ans;
    }

    public static void fun(int[] arr,int t,List<List<Integer>> ans,List<Integer> list,int i){
        if(t==0){
            ans.add(new ArrayList<>(list));
            return ;
        }
        if(t<0){
            return ;
        }
        for(int j=i;j<arr.length;j++){
            list.add(arr[j]);
            fun(arr,t-arr[j],ans,list,j);
            list.remove(list.size()-1);
        }
    }
}


_________________________________________________
Method 2
____________________________________________________
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans =new ArrayList<>();
        fun(candidates,target,ans,new ArrayList<>(),0);
        return ans;
    }

    public static void fun(int[] arr,int t,List<List<Integer>> ans,List<Integer> list,int idx){
        if(idx==arr.length){
            if(t==0){
                ans.add(new ArrayList<>(list));
            }
            return ;
        }
        if(t<0)return ;
        list.add(arr[idx]);
        fun(arr,t-arr[idx],ans,list,idx);
        list.remove(list.size()-1);
        fun(arr,t,ans,list,idx+1);
    }
}
__________________________________
Method 3
_____________________________
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans =new ArrayList<>();
        fun(candidates,target,ans,new ArrayList<>(),0);
        return ans;
    }

    public static void fun(int[] arr,int t,List<List<Integer>> ans,List<Integer> list,int idx){
        if(idx==arr.length){
            if(t==0){
                ans.add(new ArrayList<>(list));
            }
            return ;
        }
        if(arr[idx]<=t){
            list.add(arr[idx]);
        fun(arr,t-arr[idx],ans,list,idx);
        list.remove(list.size()-1);
        }
        
        fun(arr,t,ans,list,idx+1);
    }
}
